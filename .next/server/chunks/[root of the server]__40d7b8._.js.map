{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/Fufu/booking/fish-booking-system/app/api/export/excel/route.ts"],"sourcesContent":["// app/api/export/excel/route.ts\n\nimport { NextResponse } from \"next/server\";\nimport { PrismaClient } from \"@prisma/client\";\nimport * as XLSX from \"xlsx\";\n\nconst prisma = new PrismaClient();\n\ninterface Booking {\n  id: number;\n  team: string;\n  customerGroup: string;\n  customerName: string;\n  price: string; // Assuming price is stored as a string\n  dailyQuantities: Record<string, number> | null; // ปรับให้รองรับ null\n  fishSize: string;\n  fishType: string;\n  code: string; // Salesperson code\n  createdAt: Date;\n  weekNumber: number;\n  userId: number;\n}\n\nexport async function GET(req: Request) {\n  try {\n    const { searchParams } = new URL(req.url);\n    const weekParam = searchParams.get(\"weekNumber\");\n    const searchDateParam = searchParams.get(\"searchDate\");\n\n    let bookings: Booking[];\n\n    if (weekParam && weekParam !== \"all\") {\n      const selectedWeek = parseInt(weekParam, 10);\n      if (isNaN(selectedWeek)) {\n        return NextResponse.json({ error: \"Invalid weekNumber\" }, { status: 400 });\n      }\n\n      bookings = (await prisma.booking.findMany({\n        where: { weekNumber: selectedWeek },\n      })) as Booking[];\n    } else {\n      bookings = (await prisma.booking.findMany()) as Booking[];\n    }\n\n    if (searchDateParam) {\n      const searchDate = new Date(searchDateParam);\n      bookings = bookings.filter((booking) => {\n        const bookingDate = new Date(booking.createdAt);\n        return bookingDate.toDateString() === searchDate.toDateString();\n      });\n    }\n\n    // สร้างโครงสร้างข้อมูลใหม่\n    const allDays = Array.from(\n      new Set(\n        bookings.flatMap((booking) => \n          booking.dailyQuantities ? Object.keys(booking.dailyQuantities) : []\n        )\n      )\n    ).sort();\n\n    const data: any[] = bookings.map((booking) => {\n      const dailyQuantitiesData = allDays.reduce((acc: any, day) => {\n        acc[day] = booking.dailyQuantities?.[day] || 0;\n        return acc;\n      }, {});\n\n      return {\n        \"พนักงาน\": booking.code,\n        Team: booking.team,\n        \"กลุ่มลูกค้า\": booking.customerGroup,\n        \"ชื่อลูกค้า\": booking.customerName,\n        \"ขนาดปลา\": booking.fishSize,\n        \"ประเภทปลา\": booking.fishType,\n        \"ราคา\": booking.price,\n        ...dailyQuantitiesData,\n        \"รวมสัปดาห์\": Object.values(dailyQuantitiesData).reduce((sum: number, qty) => sum + Number(qty), 0),\n      };\n    });\n\n    const ws = XLSX.utils.json_to_sheet(data, { header: [\"พนักงาน\", \"Team\", \"กลุ่มลูกค้า\", \"ชื่อลูกค้า\", \"ขนาดปลา\", \"ราคา\", ...allDays, \"รวมสัปดาห์\"] });\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"Booking Report\");\n\n    const excelBuffer = XLSX.write(wb, { type: \"buffer\", bookType: \"xlsx\" });\n\n    return new NextResponse(excelBuffer, {\n      headers: {\n        \"Content-Type\": \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n        \"Content-Disposition\": `attachment; filename=Booking_Report${weekParam && weekParam !== \"all\" ? `_Week${weekParam}` : \"\"}${searchDateParam ? `_Date${searchDateParam}` : \"\"}.xlsx`,\n      },\n    });\n  } catch (error) {\n    console.error(\"Error generating Excel:\", error);\n    return NextResponse.json({ error: \"Failed to generate Excel file\" }, { status: 500 });\n  }\n}\n\n"],"names":[],"mappings":"AAAA,gCAAgC;;;;AAEhC;AACA;AACA;;;;AAEA,MAAM,SAAS,IAAI,2GAAA,CAAA,eAAY;AAiBxB,eAAe,IAAI,GAAY;IACpC,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;QACxC,MAAM,YAAY,aAAa,GAAG,CAAC;QACnC,MAAM,kBAAkB,aAAa,GAAG,CAAC;QAEzC,IAAI;QAEJ,IAAI,aAAa,cAAc,OAAO;YACpC,MAAM,eAAe,SAAS,WAAW;YACzC,IAAI,MAAM,eAAe;gBACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAAE,OAAO;gBAAqB,GAAG;oBAAE,QAAQ;gBAAI;YAC1E;YAEA,WAAY,MAAM,OAAO,OAAO,CAAC,QAAQ,CAAC;gBACxC,OAAO;oBAAE,YAAY;gBAAa;YACpC;QACF,OAAO;YACL,WAAY,MAAM,OAAO,OAAO,CAAC,QAAQ;QAC3C;QAEA,IAAI,iBAAiB;YACnB,MAAM,aAAa,IAAI,KAAK;YAC5B,WAAW,SAAS,MAAM,CAAC,CAAC;gBAC1B,MAAM,cAAc,IAAI,KAAK,QAAQ,SAAS;gBAC9C,OAAO,YAAY,YAAY,OAAO,WAAW,YAAY;YAC/D;QACF;QAEA,2BAA2B;QAC3B,MAAM,UAAU,MAAM,IAAI,CACxB,IAAI,IACF,SAAS,OAAO,CAAC,CAAC,UAChB,QAAQ,eAAe,GAAG,OAAO,IAAI,CAAC,QAAQ,eAAe,IAAI,EAAE,IAGvE,IAAI;QAEN,MAAM,OAAc,SAAS,GAAG,CAAC,CAAC;YAChC,MAAM,sBAAsB,QAAQ,MAAM,CAAC,CAAC,KAAU;gBACpD,GAAG,CAAC,IAAI,GAAG,QAAQ,eAAe,EAAE,CAAC,IAAI,IAAI;gBAC7C,OAAO;YACT,GAAG,CAAC;YAEJ,OAAO;gBACL,WAAW,QAAQ,IAAI;gBACvB,MAAM,QAAQ,IAAI;gBAClB,eAAe,QAAQ,aAAa;gBACpC,cAAc,QAAQ,YAAY;gBAClC,WAAW,QAAQ,QAAQ;gBAC3B,aAAa,QAAQ,QAAQ;gBAC7B,QAAQ,QAAQ,KAAK;gBACrB,GAAG,mBAAmB;gBACtB,cAAc,OAAO,MAAM,CAAC,qBAAqB,MAAM,CAAC,CAAC,KAAa,MAAQ,MAAM,OAAO,MAAM;YACnG;QACF;QAEA,MAAM,KAAK,gIAAK,KAAK,CAAC,aAAa,CAAC,MAAM;YAAE,QAAQ;gBAAC;gBAAW;gBAAQ;gBAAe;gBAAc;gBAAW;mBAAW;gBAAS;aAAa;QAAC;QAClJ,MAAM,KAAK,gIAAK,KAAK,CAAC,QAAQ;QAC9B,gIAAK,KAAK,CAAC,iBAAiB,CAAC,IAAI,IAAI;QAErC,MAAM,cAAc,gIAAK,KAAK,CAAC,IAAI;YAAE,MAAM;YAAU,UAAU;QAAO;QAEtE,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,aAAa;YACnC,SAAS;gBACP,gBAAgB;gBAChB,uBAAuB,CAAC,mCAAmC,EAAE,aAAa,cAAc,QAAQ,CAAC,KAAK,EAAE,WAAW,GAAG,KAAK,kBAAkB,CAAC,KAAK,EAAE,iBAAiB,GAAG,GAAG,KAAK,CAAC;YACpL;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgC,GAAG;YAAE,QAAQ;QAAI;IACrF;AACF"}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}