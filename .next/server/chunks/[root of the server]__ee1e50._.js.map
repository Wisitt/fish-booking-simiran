{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/Fufu/booking/fish-booking-system/app/api/bookings/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\nexport async function GET() {\n    try {\n      const bookings = await prisma.booking.findMany();\n      return NextResponse.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching bookings:\", error);\n      return NextResponse.json({ error: \"Failed to fetch bookings\" }, { status: 500 });\n    }\n  }\n  \n  export async function POST(req: Request) {\n    try {\n      const body = await req.json();\n  \n      if (\n        !body.code ||\n        !body.team ||\n        !body.customerGroup ||\n        !body.customerName ||\n        !body.price || \n        !body.dailyQuantities\n      ) {\n        return NextResponse.json(\n          { error: \"Missing or invalid required fields\" },\n          { status: 400 }\n        );\n      }\n  \n      const booking = await prisma.booking.create({\n        data: {\n          code: body.code,\n          team: body.team,\n          customerGroup: body.customerGroup,\n          customerName: body.customerName,\n          fishSize: body.fishSize,\n          fishType: body.fishType,\n          price: body.price,\n          dailyQuantities: body.dailyQuantities,\n        },\n      });\n  \n      return NextResponse.json(booking, { status: 201 });\n    } catch (error) {\n      console.error(\"Error creating booking:\", error);\n      return NextResponse.json({ error: \"Server error\" }, { status: 500 });\n    }\n  }\n  \n  \n  \n  \n  export async function DELETE(req: Request) {\n    try {\n      const url = new URL(req.url);\n      const id = url.searchParams.get(\"id\");\n  \n      if (!id) {\n        return NextResponse.json({ error: \"Missing ID\" }, { status: 400 });\n      }\n  \n      await prisma.booking.delete({ where: { id: parseInt(id, 10) } });\n      return NextResponse.json({ message: \"Booking deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting booking:\", error);\n      return NextResponse.json({ error: \"Server error\" }, { status: 500 });\n    }\n  }\n  \n  "],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,2GAAA,CAAA,eAAY;AAExB,eAAe;IAClB,IAAI;QACF,MAAM,WAAW,MAAM,OAAO,OAAO,CAAC,QAAQ;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA2B,GAAG;YAAE,QAAQ;QAAI;IAChF;AACF;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,IACE,CAAC,KAAK,IAAI,IACV,CAAC,KAAK,IAAI,IACV,CAAC,KAAK,aAAa,IACnB,CAAC,KAAK,YAAY,IAClB,CAAC,KAAK,KAAK,IACX,CAAC,KAAK,eAAe,EACrB;YACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAqC,GAC9C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,UAAU,MAAM,OAAO,OAAO,CAAC,MAAM,CAAC;YAC1C,MAAM;gBACJ,MAAM,KAAK,IAAI;gBACf,MAAM,KAAK,IAAI;gBACf,eAAe,KAAK,aAAa;gBACjC,cAAc,KAAK,YAAY;gBAC/B,UAAU,KAAK,QAAQ;gBACvB,UAAU,KAAK,QAAQ;gBACvB,OAAO,KAAK,KAAK;gBACjB,iBAAiB,KAAK,eAAe;YACvC;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,SAAS;YAAE,QAAQ;QAAI;IAClD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;AACF;AAKO,eAAe,OAAO,GAAY;IACvC,IAAI;QACF,MAAM,MAAM,IAAI,IAAI,IAAI,GAAG;QAC3B,MAAM,KAAK,IAAI,YAAY,CAAC,GAAG,CAAC;QAEhC,IAAI,CAAC,IAAI;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAa,GAAG;gBAAE,QAAQ;YAAI;QAClE;QAEA,MAAM,OAAO,OAAO,CAAC,MAAM,CAAC;YAAE,OAAO;gBAAE,IAAI,SAAS,IAAI;YAAI;QAAE;QAC9D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA+B;IACrE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;AACF"}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}