{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/Fufu/booking/fish-booking-system/app/api/bookings/%5Bid%5D/route.ts"],"sourcesContent":["// app/api/bookings/[id].ts\n\nimport { NextResponse } from \"next/server\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\n// Example API handler for PUT method\nexport async function PUT(req: Request, { params }: { params: { id: string } }) {\n  const bookingId = Number(params.id);  // Convert string to number\n\n  const body = await req.json();\n\n  if (!body.code || !body.team || !body.customerGroup || !body.customerName || !body.price) {\n    return NextResponse.json({ error: \"Missing required fields\" }, { status: 400 });\n  }\n\n  try {\n    const updatedBooking = await prisma.booking.update({\n      where: { id: bookingId },\n      data: {\n        code: body.code,\n        team: body.team,\n        customerGroup: body.customerGroup,\n        customerName: body.customerName,\n        fishSize: body.fishSize,\n        fishType: body.fishType,\n        price: body.price,\n        dailyQuantities: body.dailyQuantities, // Ensure dailyQuantities is passed correctly\n        userId: body.userId, // Make sure userId is passed for the update\n      },\n    });\n\n    return NextResponse.json(updatedBooking, { status: 200 });\n  } catch (error) {\n    console.error(\"Error updating booking:\", error);\n    return NextResponse.json({ error: \"Error saving booking\" }, { status: 500 });\n  }\n}\n\nexport async function DELETE(req: Request, { params }: { params: { id: string } }) {\n    const email = req.headers.get(\"email\");\n    if (!email) {\n      return NextResponse.json({ message: \"Email header is missing\" }, { status: 400 });\n    }\n    const bookingId = Number(params.id);\n  \n    try {\n      const booking = await prisma.booking.findUnique({\n        where: { id: bookingId },\n      });\n  \n      if (!booking) {\n        return NextResponse.json({ message: \"Booking not found\" }, { status: 404 });\n      }\n  \n      const user = await prisma.user.findUnique({ where: { email } });\n  \n      if (user && booking.userId !== user.id && user.role !== \"admin\") {\n        return NextResponse.json({ message: \"Unauthorized to delete this booking\" }, { status: 403 });\n      }\n  \n      await prisma.booking.delete({ where: { id: bookingId } });\n  \n      return NextResponse.json({ message: \"Booking deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting booking:\", error);\n      return NextResponse.json({ message: \"Error deleting booking\" }, { status: 500 });\n    }\n  }\n  "],"names":[],"mappings":"AAAA,2BAA2B;;;;;AAE3B;AACA;;;AAEA,MAAM,SAAS,IAAI,2GAAA,CAAA,eAAY;AAGxB,eAAe,IAAI,GAAY,EAAE,EAAE,MAAM,EAA8B;IAC5E,MAAM,YAAY,OAAO,OAAO,EAAE,GAAI,2BAA2B;IAEjE,MAAM,OAAO,MAAM,IAAI,IAAI;IAE3B,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,aAAa,IAAI,CAAC,KAAK,YAAY,IAAI,CAAC,KAAK,KAAK,EAAE;QACxF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA0B,GAAG;YAAE,QAAQ;QAAI;IAC/E;IAEA,IAAI;QACF,MAAM,iBAAiB,MAAM,OAAO,OAAO,CAAC,MAAM,CAAC;YACjD,OAAO;gBAAE,IAAI;YAAU;YACvB,MAAM;gBACJ,MAAM,KAAK,IAAI;gBACf,MAAM,KAAK,IAAI;gBACf,eAAe,KAAK,aAAa;gBACjC,cAAc,KAAK,YAAY;gBAC/B,UAAU,KAAK,QAAQ;gBACvB,UAAU,KAAK,QAAQ;gBACvB,OAAO,KAAK,KAAK;gBACjB,iBAAiB,KAAK,eAAe;gBACrC,QAAQ,KAAK,MAAM;YACrB;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,gBAAgB;YAAE,QAAQ;QAAI;IACzD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF;AAEO,eAAe,OAAO,GAAY,EAAE,EAAE,MAAM,EAA8B;IAC7E,MAAM,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC;IAC9B,IAAI,CAAC,OAAO;QACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA0B,GAAG;YAAE,QAAQ;QAAI;IACjF;IACA,MAAM,YAAY,OAAO,OAAO,EAAE;IAElC,IAAI;QACF,MAAM,UAAU,MAAM,OAAO,OAAO,CAAC,UAAU,CAAC;YAC9C,OAAO;gBAAE,IAAI;YAAU;QACzB;QAEA,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAoB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;YAAE,OAAO;gBAAE;YAAM;QAAE;QAE7D,IAAI,QAAQ,QAAQ,MAAM,KAAK,KAAK,EAAE,IAAI,KAAK,IAAI,KAAK,SAAS;YAC/D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAsC,GAAG;gBAAE,QAAQ;YAAI;QAC7F;QAEA,MAAM,OAAO,OAAO,CAAC,MAAM,CAAC;YAAE,OAAO;gBAAE,IAAI;YAAU;QAAE;QAEvD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA+B;IACrE,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAyB,GAAG;YAAE,QAAQ;QAAI;IAChF;AACF"}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}