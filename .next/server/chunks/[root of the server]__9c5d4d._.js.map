{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/Fufu/booking/fish-booking-system/app/api/summary/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { PrismaClient } from \"@prisma/client\";\n\nconst prisma = new PrismaClient();\n\ninterface Booking {\n  id: number;\n  team: string;\n  customerGroup: string;\n  customerName: string;\n  price: string; // Assuming price is stored as a string\n  dailyQuantities: Record<string, number> | null; // dailyQuantities can be null\n  fishSize: string;\n  fishType: string;\n  code: string; // Salesperson code\n  createdAt: Date;\n}\n\nexport async function GET() {\n  try {\n    // Fetch all bookings from the database\n    const bookings = await prisma.booking.findMany();\n\n    // Generate the summary\n    const summary = bookings.map((booking) => {\n      const totalQuantity = booking.dailyQuantities\n        ? Object.values(booking.dailyQuantities).reduce((sum, qty) => sum + qty, 0)\n        : 0;\n\n      return {\n        code: booking.code,\n        customerName: booking.customerName,\n        team: booking.team,\n        fishSize: booking.fishSize,\n        totalQuantity,\n      };\n    });\n\n    return NextResponse.json(summary, { status: 200 });\n  } catch (error) {\n    console.error(\"Error fetching summary:\", error);\n    return NextResponse.json({ error: \"Failed to fetch summary\" }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,2GAAA,CAAA,eAAY;AAexB,eAAe;IACpB,IAAI;QACF,uCAAuC;QACvC,MAAM,WAAW,MAAM,OAAO,OAAO,CAAC,QAAQ;QAE9C,uBAAuB;QACvB,MAAM,UAAU,SAAS,GAAG,CAAC,CAAC;YAC5B,MAAM,gBAAgB,QAAQ,eAAe,GACzC,OAAO,MAAM,CAAC,QAAQ,eAAe,EAAE,MAAM,CAAC,CAAC,KAAK,MAAQ,MAAM,KAAK,KACvE;YAEJ,OAAO;gBACL,MAAM,QAAQ,IAAI;gBAClB,cAAc,QAAQ,YAAY;gBAClC,MAAM,QAAQ,IAAI;gBAClB,UAAU,QAAQ,QAAQ;gBAC1B;YACF;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,SAAS;YAAE,QAAQ;QAAI;IAClD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA0B,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACF"}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}